//
//  MisdefinitionExploitView.swift
//  PoC-LanShield
//
//  Created by Alex - SEEMOO on 09.01.25.
//

import Foundation
import SwiftUI
import os

/// The iPhone is connected with the subnet 192.168.1.0/24 and we attack the router at 192.168.2.1 which is reachable via a static routing table.
struct MisdefinitionExploitView: View {
    
    @StateObject var router = OpenWRTRouterExploit(baseURL: URL(string: "http://192.168.1.1")!)
    
    @State var running = false
    
    @State var wifiAddress = WiFiAddress().getWiFiAddress() ?? "Unknown"
    @State var routerIP = "192.168.1.1"
    
    var body: some View {
        ScrollView {
            VStack {
                Text("Mis-definition of LAN addresses")
                    .font(.title)
                
                Text("""
                 We found that although the local network permission is required for the currently connected address space (e.g., 192.168.2.0/24). The app may still connect to other local networks (e.g., 192.168.1.1/24). It's simple to configure a network router to route between different networks by adding the network to a static routing table. 
                 """)
                
                Image(systemName: "arrow.left.arrow.right")
                    .resizable()
                    .aspectRatio(contentMode: .fit)
                    .frame(width: 75, height: 75, alignment: .center)
                    .padding()
                
                Text("""
                 By tapping the button below, the app will attack the second router in a connected network.
                 We use a OpenWRT router that is attacked from another network (TP-Link). 
                 """)
                
                HStack {
                    Button {
                        startRouter()
                        self.running = true
                    } label: {
                        Text("Attack Router")
                    }
                    .buttonStyle(.borderedProminent)
                }
                
                if running {
                    ProgressView()
                }
                
                Text("Attack log:")
                    .frame(minWidth:0, maxWidth: .infinity, alignment: .leading)
                VStack {
                    Text("Own IP Address: \(self.wifiAddress)")
                    Text("Router IP Address: \(self.routerIP)")
                    
                    Text(self.router.log)
                        .monospaced()
                        .multilineTextAlignment(.leading)
                        .frame(minWidth:0, maxWidth: .infinity, alignment: .leading)

                }
                .frame(minWidth: 0, maxWidth: .infinity)
                
                
                
            }
            .frame(minWidth: 0, maxWidth: .infinity)
            .padding()
        }
        
    }
    
    func startRouter() {
        self.router.baseURL = URL(string: "http://\(self.routerIP)")!
        Task {
            do {
                try await self.router.start()
            }catch {
                os_log("Attack failed: \(error.localizedDescription)")
            }
            await MainActor.run {
                self.running = false
            }
        }
    }
}
